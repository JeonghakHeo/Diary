[{"/Users/charlie/Documents/The Net Ninja/Material-UI/src/index.js":"1","/Users/charlie/Documents/The Net Ninja/Material-UI/src/App.js":"2","/Users/charlie/Documents/The Net Ninja/Material-UI/src/pages/Create.js":"3","/Users/charlie/Documents/The Net Ninja/Material-UI/src/pages/Notes.js":"4","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/NoteCard.js":"5","/Users/charlie/Documents/The Net Ninja/Material-UI/src/store.js":"6","/Users/charlie/Documents/The Net Ninja/Material-UI/src/reducers/index.js":"7","/Users/charlie/Documents/The Net Ninja/Material-UI/src/reducers/search.js":"8","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Layout.js":"9","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Landing.js":"10","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Navbar.js":"11","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/NotFound.js":"12","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/routing/Routes.js":"13"},{"size":174,"mtime":1617931339042,"results":"14","hashOfConfig":"15"},{"size":1300,"mtime":1618206848818,"results":"16","hashOfConfig":"15"},{"size":3298,"mtime":1617683084329,"results":"17","hashOfConfig":"15"},{"size":1072,"mtime":1617940842768,"results":"18","hashOfConfig":"15"},{"size":5251,"mtime":1617940636758,"results":"19","hashOfConfig":"15"},{"size":390,"mtime":1617926622597,"results":"20","hashOfConfig":"15"},{"size":133,"mtime":1617927114909,"results":"21","hashOfConfig":"15"},{"size":1403,"mtime":1617939907354,"results":"22","hashOfConfig":"15"},{"size":5591,"mtime":1618207188538,"results":"23","hashOfConfig":"15"},{"size":1248,"mtime":1618204624092,"results":"24","hashOfConfig":"15"},{"size":1492,"mtime":1618205468475,"results":"25","hashOfConfig":"15"},{"size":125,"mtime":1618205110638,"results":"26","hashOfConfig":"15"},{"size":760,"mtime":1618207049821,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16i6q8r",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/charlie/Documents/The Net Ninja/Material-UI/src/index.js",[],["58","59"],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/App.js",["60","61","62","63","64"],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/pages/Create.js",["65","66","67"],"import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Typography, Button, ButtonGroup, Container, FormControlLabel, FormLabel, FormControl } from '@material-ui/core';\nimport { Radio, RadioGroup } from '@material-ui/core';\nimport { KeyboardArrowRight } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: 20,\n    marginBottom: 20,\n    display: 'block'\n  }\n})\n\n\n\nexport default function Create() {\n  const classes = useStyles();\n  const [title, setTitle] = useState('');\n  const [details, setDetails] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [detailsError, setDetailsError] = useState(false);\n  const [category, setCategory] = useState('todos');\n  const history = useHistory();\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setTitleError(false);\n    setDetailsError(false);\n\n    if (titleError == '') {\n      setTitleError(true)\n    }\n\n    if (detailsError == '') {\n      setDetailsError(true)\n    }\n\n    if (title && details) {\n      fetch('http://localhost:8000/note', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title, details, category })\n      })\n        .then(() => {\n          history.push('/')\n        })\n    }\n  }\n\n  return (\n    <Container>\n      <Typography\n        className={classes.title}\n        variant='h6'\n        component='h2'\n        color='textSecondary'\n        gutterBottom\n      >\n        Create a new Note\n      </Typography>\n\n      <form noValidate autoComplete=\"off\" onSubmit={onSubmit}>\n        <TextField\n          onChange={e => setTitle(e.target.value)}\n          className={classes.field}\n          label='Note title'\n          color='primary'\n          variant='outlined'\n          fullWidth\n          error={titleError}\n          required\n        />\n\n        <TextField\n          onChange={e => setDetails(e.target.value)}\n          className={classes.field}\n          label='Note details'\n          color='primary'\n          variant='outlined'\n          fullWidth\n          multiline\n          row={4}\n          error={detailsError}\n          required\n        />\n\n        <FormControl className={classes.field} color='primary'>\n          <FormLabel>Note Category</FormLabel>\n          <RadioGroup value={category} onChange={e => setCategory(e.target.value)}>\n            <FormControlLabel value='money' control={<Radio color='primary' />} label='Money'></FormControlLabel>\n            <FormControlLabel value='todos' control={<Radio color='primary' />} label='Todos'></FormControlLabel>\n            <FormControlLabel value='reminders' control={<Radio color='primary' />} label='Reminders'></FormControlLabel>\n            <FormControlLabel value='work' control={<Radio color='primary' />} label='Work'></FormControlLabel>\n          </RadioGroup>\n        </FormControl>\n        <Button\n          className={classes.btn}\n          onClick={() => console.log('You clicked me')}\n          type='submit'\n          color='primary'\n          variant='contained'\n          endIcon={<KeyboardArrowRight />}\n        >\n          Submit\n      </Button>\n      </form>\n    </Container>\n  )\n}\n","/Users/charlie/Documents/The Net Ninja/Material-UI/src/pages/Notes.js",["68","69"],"import { useEffect, useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport NoteCard from '../components/NoteCard';\nimport Masonry from 'react-masonry-css';\nimport { connect } from 'react-redux';\n\n\nconst Notes = ({ notes, setNotes, data }) => {\n\n\n  const handleDelete = async (id) => {\n    await fetch('http://localhost:8000/note/' + id, {\n      method: 'DELETE'\n    })\n\n    const newNotes = notes.filter(note => note.id !== id);\n    setNotes(newNotes)\n  };\n  const breakpoints = {\n    default: 3,\n    1100: 2,\n    700: 1\n  }\n\n  return (\n    <Container>\n      <Masonry\n        breakpointCols={breakpoints}\n        className=\"my-masonry-grid\"\n        columnClassName=\"my-masonry-grid_column\"\n      >\n        {\n          data.map(data => (\n            <div key={data.id}>\n              <NoteCard note={data} handleDelete={handleDelete} />\n            </div>\n          ))\n        }\n      </Masonry>\n    </Container>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.search.data\n  }\n}\n\nexport default connect(mapStateToProps)(Notes)","/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/NoteCard.js",["70","71"],"import { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport { Avatar, IconButton, Typography } from '@material-ui/core';\nimport { DeleteOutlined } from '@material-ui/icons';\nimport { amber, blue, green, pink, yellow } from '@material-ui/core/colors';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarBorderRoundedIcon from '@material-ui/icons/StarBorderRounded';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    card: {\n      height: '320px',\n      width: '360px'\n    },\n    test: {\n      border: (note) => {\n        if (note.category === 'reminders')\n          return '1px solid red'\n      }\n    },\n    avatar: {\n      backgroundColor: (note) => {\n        if (note.category === 'work') {\n          return yellow[700]\n        }\n        if (note.category === 'todos') {\n          return green[500]\n        }\n        if (note.category === 'reminders') {\n          return pink[500]\n        }\n        return blue[500]\n      }\n    },\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontFamily: 'Quicksand',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: 'none',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n      textAlign: 'center',\n      width: '400px',\n      padding: 50,\n      paddingTop: 20,\n      position: 'absolute',\n      top: '20%',\n      outline: 'none',\n      borderRadius: 4\n    },\n    delete: {\n      fontSize: '100px',\n      color: amber[200]\n    },\n    close: {\n      marginLeft: '100%',\n      marginBottom: '5%'\n    },\n    margin: {\n      margin: theme.spacing(1)\n    },\n    padding: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1)\n    },\n    favorite: {\n      color: yellow[500]\n    }\n  }\n})\n\nconst NoteCard = ({ note, handleDelete }) => {\n  const classes = useStyles(note);\n  const [open, setOpen] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleFavorite = () => {\n\n    if (isFavorite) {\n      setIsFavorite(false)\n\n    } else {\n      setIsFavorite(true)\n      // change color\n    }\n\n  }\n\n  return (\n    <div>\n      <Card className={classes.card, classes.test} elevation={1}>\n        <CardHeader\n          avatar={\n            <Avatar className={classes.avatar}>{note.category[0].toUpperCase()}</Avatar>\n          }\n          action={\n            <>\n              <IconButton onClick={handleOpen}>\n                <DeleteOutlined />\n              </IconButton>\n              <Modal\n                aria-labelledby='transition-modal-title'\n                aria-describedby='transition-modal-description'\n                className={classes.modal}\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                  timeout: 500,\n                }}\n              >\n                <Fade in={open}>\n                  <div className={classes.paper}>\n                    <div styles={{ position: 'absolute' }} >\n                      <IconButton size='small' className={classes.close} onClick={handleClose}><CloseIcon /></IconButton>\n                    </div>\n                    <ErrorOutlineOutlinedIcon className={classes.delete} />\n                    <Typography variant='h5' component='h2' id='transition-modal-title'>Are you sure?</Typography>\n                    <Typography component='p' fontSize='1rem' gutterBottom color='textSecondary'>If you delete it, you can't recover it.</Typography>\n                    <Button className={classes.margin} variant='contained' color='default' onClick={handleClose}>Cancel</Button>\n                    <Button className={classes.margin} variant='contained' color='secondary' onClick={() => handleDelete(note.id)}>Delete</Button>\n                  </div>\n                </Fade>\n              </Modal>\n            </>\n          }\n          title={note.title[0].toUpperCase() + note.title.slice(1, note.title.length)}\n          subheader={note.category}\n        />\n\n        <CardContent>\n          <Typography variant='body2' color='textSecondary'>\n            {note.details}\n          </Typography>\n        </CardContent>\n\n        <CardActions>\n          <Link to='/create'>\n            <Button size='small' variant='outlined' color='primary'>\n              Edit\n            </Button>\n          </Link>\n          <IconButton onClick={handleFavorite} >\n            <StarBorderRoundedIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n    </div>\n  )\n}\n\nexport default NoteCard\n","/Users/charlie/Documents/The Net Ninja/Material-UI/src/store.js",[],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/reducers/index.js",[],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/reducers/search.js",[],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Layout.js",["72","73","74","75","76"],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Landing.js",["77"],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/Navbar.js",["78","79"],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/layout/NotFound.js",[],"/Users/charlie/Documents/The Net Ninja/Material-UI/src/components/routing/Routes.js",["80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":1,"column":20,"nodeType":"87","messageId":"88","endLine":1,"endColumn":29},{"ruleId":"85","severity":1,"message":"90","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":13},{"ruleId":"85","severity":1,"message":"91","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"92","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":14},{"ruleId":"85","severity":1,"message":"93","line":3,"column":30,"nodeType":"87","messageId":"88","endLine":3,"endColumn":41},{"ruleId":"94","severity":1,"message":"95","line":33,"column":20,"nodeType":"96","messageId":"97","endLine":33,"endColumn":22},{"ruleId":"94","severity":1,"message":"95","line":37,"column":22,"nodeType":"96","messageId":"97","endLine":37,"endColumn":24},{"ruleId":"85","severity":1,"message":"89","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":1,"column":21,"nodeType":"87","messageId":"88","endLine":1,"endColumn":29},{"ruleId":"98","severity":1,"message":"99","line":58,"column":7,"nodeType":"100","messageId":"97","endLine":58,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":114,"column":36,"nodeType":"103","messageId":"104","endLine":114,"endColumn":37},{"ruleId":"85","severity":1,"message":"105","line":18,"column":8,"nodeType":"87","messageId":"88","endLine":18,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":105,"column":16,"nodeType":"108","messageId":"109","endLine":105,"endColumn":24,"fix":"110"},{"ruleId":"85","severity":1,"message":"111","line":110,"column":10,"nodeType":"87","messageId":"88","endLine":110,"endColumn":15},{"ruleId":"106","severity":1,"message":"107","line":144,"column":30,"nodeType":"108","messageId":"109","endLine":144,"endColumn":38,"fix":"112"},{"ruleId":"94","severity":1,"message":"95","line":193,"column":44,"nodeType":"96","messageId":"97","endLine":193,"endColumn":46},{"ruleId":"113","severity":1,"message":"114","line":12,"column":11,"nodeType":"115","endLine":12,"endColumn":70},{"ruleId":"85","severity":1,"message":"116","line":8,"column":8,"nodeType":"87","messageId":"88","endLine":8,"endColumn":18},{"ruleId":"85","severity":1,"message":"117","line":9,"column":8,"nodeType":"87","messageId":"88","endLine":9,"endColumn":16},{"ruleId":"85","severity":1,"message":"118","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":16},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Notes' is defined but never used.","'Create' is defined but never used.","'Layout' is defined but never used.","'ButtonGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'search' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"121","text":"122"},"'notes' is assigned a value but never used.",{"range":"123","text":"122"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'NotFound' is defined but never used.","no-global-assign","no-unsafe-negation",[2760,2760],"()",[3670,3670]]